{"version":3,"sources":["webpack:///./node_modules/gatsby-plugin-mdx/index.js","webpack:///./src/pages/index.js","webpack:///./node_modules/gatsby-plugin-mdx/mdx-renderer.js"],"names":["MDXRenderer","require","module","shortcodes","Img","data","body","mdx","home","frontmatter","className","fluid","bodyImage","childImageSharp","components","query","React","useMDXComponents","useMDXScope","scope","children","props","mdxComponents","mdxScope","End","fullScope","keys","Object","values","key","fn"],"mappings":"gFAMA,IAAMA,EAAcC,EAApB,QAEAC,UAAiB,CACfF,YAAaA,I,kCCTf,gIASMG,EAAa,CAChBC,SAGY,sBAAe,IAAZC,EAAW,EAAXA,KACTC,EAAOD,EAAKE,IAAID,KAChBE,EAAOH,EAAKE,IAAIE,YAEtB,OAEA,WADH,CACI,IAAD,KACG,uBAASC,UAAU,SAChB,mBAAKA,UAAU,gBACZ,mBAAKA,UAAU,eAYZ,mBAAKA,UAAU,iBACZ,YAAC,IAAD,CAAKC,MAAOH,EAAKI,UAAUC,gBAAgBF,SAE9C,YAAC,cAAD,CAAaG,WAAYX,GACtB,YAAC,cAAD,CAAaM,YAAaD,GAAOF,SA8B5C,IAAMS,EAAK,c,qrECpElB,IAAMC,EAAQf,EAAd,Q,EACkCA,EAAQ,QAAlCgB,E,EAAAA,iBAAkBV,E,EAAAA,IAClBW,EAAgBjB,EAAQ,QAAxBiB,YAERhB,UAAiB,SAAqB,GAKlC,IAJFiB,EAIC,EAJDA,MACAL,EAGC,EAHDA,WACAM,EAEC,EAFDA,SACGC,E,oIACF,sCACKC,EAAgBL,EAAtB,GACMM,EAAWL,EAFhB,GAKKM,EAAMR,EAAA,SAAc,WACxB,MACE,OAAO,KAGT,IAAMS,EAAS,GAGbT,MAHa,EAIbT,OAJF,GAQMmB,EAAOC,YAAb,GACMC,EAASF,EAAA,KAAS,SAAAG,GAAG,OAAIJ,EAAJ,MAG3B,OAFQ,mCAAR,KAEOK,2BAAP,OACC,CAACV,EAlBJ,IAoBA,OAAOJ,EAAA,mBAA2BF,WAAYQ,GAA9C","file":"component---src-pages-index-js-c9c0dd557ad59c745c0e.js","sourcesContent":["/**\n * Welcome to gatsby-plugin-mdx!\n *\n * Start reading in gatsby-node.js\n */\n\nconst MDXRenderer = require(`./mdx-renderer`)\n\nmodule.exports = {\n  MDXRenderer: MDXRenderer,\n}\n","import React from 'react'\nimport { graphql } from 'gatsby'\n// import { Link } from 'gatsby'\n// import Masonry from 'react-masonry-component'\nimport Img from 'gatsby-image'\nimport Layout from \"../components/layout\"\nimport { MDXRenderer } from \"gatsby-plugin-mdx\"\nimport { MDXProvider } from \"@mdx-js/react\"\n\nconst shortcodes = {\n   Img,\n}\n\nexport default ({ data }) => {\n   const body = data.mdx.body\n   const home = data.mdx.frontmatter\n\n   return (\n//const IndexPage = ({ data }) => (\n   <Layout>\n      <article className=\"sheet\">\n         <div className=\"sheet__inner\">\n            <div className=\"sheet__body\">\n               {/* <div className=\"sheet__image-container\">\n                  <Img\n                  fluid={home.bodyImage.childImageSharp.fluid}\n                  style={{\n                     maxWidth: home.bodyImage.childImageSharp.presentationWidth,\n                     width: home.bodyImage.childImageSharp.presentationWidth,\n                     display: \"inline-block\",\n                  }}\n                  sizes={home.bodyImage.childImageSharp.sizes}\n                  />\n               </div> */}\n               <div className=\"sheet__banner\">\n                  <Img fluid={home.bodyImage.childImageSharp.fluid} />\n               </div>\n               <MDXProvider components={shortcodes}>\n                  <MDXRenderer frontmatter={home}>{body}</MDXRenderer>\n               </MDXProvider>\n            </div>\n         </div>\n      </article>\n      {/* <Masonry className=\"showcase\">\n      {data.allMdx.edges.map(({ node }) => (\n         <div key={node.id} className=\"showcase__item\">\n            <figure className=\"card\">\n               <Link to={`/${node.fields.slug}`} className=\"card__image\">\n               <Img fluid={node.fields.thumbnail.childImageSharp.fluid} />\n               </Link>\n               <figcaption className=\"card__caption\">\n                  <h6 className=\"card__title\">\n                     <Link to={`/${node.fields.slug}`}>{node.frontmatter.title}</Link>\n                  </h6>\n                  <div className=\"card__description\">\n                     <p>{node.frontmatter.summary}</p>\n                  </div>\n               </figcaption>\n            </figure>\n         </div>\n         ))}\n      </Masonry> */}\n   </Layout>\n   )\n}\n\n//export default IndexPage\n\nexport const query = graphql`\n   query {\n      mdx(fields: { name: { eq: \"home\" } }) {\n         frontmatter {\n            title\n            bodyImage {\n               childImageSharp {\n                  fluid(maxWidth: 600, maxHeight: 250, cropFocus: CENTER) {\n                     ...GatsbyImageSharpFluid\n                     presentationWidth\n                  }\n               }\n            }\n         }\n         body\n      }\n   }\n`","const React = require(`react`)\nconst { useMDXComponents, mdx } = require(`@mdx-js/react`)\nconst { useMDXScope } = require(`./context`)\n\nmodule.exports = function MDXRenderer({\n  scope,\n  components,\n  children,\n  ...props\n}) {\n  const mdxComponents = useMDXComponents(components)\n  const mdxScope = useMDXScope(scope)\n\n  // Memoize the compiled component\n  const End = React.useMemo(() => {\n    if (!children) {\n      return null\n    }\n\n    const fullScope = {\n      // React is here just in case the user doesn't pass them in\n      // in a manual usage of the renderer\n      React,\n      mdx,\n      ...mdxScope,\n    }\n\n    const keys = Object.keys(fullScope)\n    const values = keys.map(key => fullScope[key])\n    const fn = new Function(`_fn`, ...keys, `${children}`)\n\n    return fn({}, ...values)\n  }, [children, scope])\n\n  return React.createElement(End, { components: mdxComponents, ...props })\n}\n"],"sourceRoot":""}