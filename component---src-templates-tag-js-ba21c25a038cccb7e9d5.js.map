{"version":3,"file":"component---src-templates-tag-js-ba21c25a038cccb7e9d5.js","mappings":"gLAUO,MAAMA,EAAa,SAACC,EAAKC,GAAa,YAAR,IAALA,IAAAA,GAAQ,IACrCA,EAAQD,EAAIE,cAAgBF,GAAKG,QAAQ,wBAAwBC,GAASA,EAAMC,eACjF,EAGWC,EAAQC,GACXA,GAAe,CAAC,C,+GCuE1B,UA7EgBC,IAA4B,IAA3B,YAAEC,EAAW,KAAEC,GAAMF,EACnC,MAAM,IAAEG,GAAQF,EAOhB,OACGG,EAAAA,EAAAA,GAACC,EAAAA,EAAM,MACJD,EAAAA,EAAAA,GAAA,WAASE,UAAU,UAChBF,EAAAA,EAAAA,GAAA,MAAIE,UAAU,iBAAgBf,EAAAA,EAAAA,GAAWY,GAAK,eAoBjDC,EAAAA,EAAAA,GAACG,IAAO,CAACD,UAAU,YAClBJ,EAAKM,OAAOC,MAAMC,KAAIC,IAAA,IAAC,KAAEC,GAAMD,EAAA,OAC7BP,EAAAA,EAAAA,GAAA,OAAKS,IAAKD,EAAKE,GAAIR,UAAU,mBAC1BF,EAAAA,EAAAA,GAAA,UAAQE,UAAU,SACfF,EAAAA,EAAAA,GAACW,EAAAA,KAAI,CAACC,GAAE,IAAMJ,EAAKK,OAAOC,KAAQZ,UAAU,gBAC5CF,EAAAA,EAAAA,GAACe,EAAAA,EAAG,CAACC,MAAOR,EAAKK,OAAOI,UAAUC,gBAAgBF,UAElDhB,EAAAA,EAAAA,GAAA,cAAYE,UAAU,kBACnBF,EAAAA,EAAAA,GAAA,MAAIE,UAAU,gBACXF,EAAAA,EAAAA,GAACW,EAAAA,KAAI,CAACC,GAAE,IAAMJ,EAAKK,OAAOC,MAASN,EAAKW,YAAYC,SAEvDpB,EAAAA,EAAAA,GAAA,OAAKE,UAAU,sBACZF,EAAAA,EAAAA,GAAA,SAAIQ,EAAKW,YAAYE,YAI3B,KAGH,C","sources":["webpack://gatsby-portfolio/./src/components/utils.js","webpack://gatsby-portfolio/./src/templates/tag.js"],"sourcesContent":["/**\n * Capitalizes first letters of words in string.\n * @param {string} str String to be modified\n * @param {boolean=false} lower Whether all other letters should be lowercased\n * @return {string}\n * @usage\n *   capitalize('fix this string');     // -> 'Fix This String'\n *   capitalize('javaSCrIPT');          // -> 'JavaSCrIPT'\n *   capitalize('javaSCrIPT', true);    // -> 'Javascript'\n */\nexport const Capitalize = (str, lower = false) => (\n   lower ? str.toLowerCase() : str).replace(/(?:^|\\s|[\"'([{])+\\S/g, match => match.toUpperCase()\n);\n\n\nexport const Safe = (obj) => {\n   return obj ? (obj) : ({});\n};","import React from \"react\"\n// import PropTypes from \"prop-types\"\nimport Masonry from 'react-masonry-component'\nimport Img from 'gatsby-image'\nimport Layout from \"../components/layout\"\nimport { Capitalize } from \"../components/utils\"\n\n// Components\nimport { Link, graphql } from \"gatsby\"\n\nconst TagPage = ({ pageContext, data }) => {\n   const { tag } = pageContext\n   // const { edges, totalCount } = data.allMdx\n   \n   // const tagHeader = `${totalCount} project${\n   //    totalCount === 1 ? \"\" : \"s\"\n   // } tagged with \"${tag}\"`\n\n   return (\n      <Layout>\n         <article className=\"sheet\">\n            <h1 className=\"sheet__title\">{Capitalize(tag)} Projects</h1>\n            {/* <div className=\"sheet__inner\">\n            <h1 className=\"sheet__title\">{Capitalize(tag)} Projects</h1>\n               <div className=\"sheet__body\">\n                  <h3>{tagHeader}</h3>\n                  <ul>\n                  {edges.map(({ node }) => {\n                     const { slug } = node.fields\n                     const { title } = node.frontmatter\n                     return (\n                        <li key={slug}>\n                        <Link to={`/${slug}`}>{title}</Link>\n                        </li>\n                     )\n                  })}\n                  </ul>\n                  <Link to=\"/tags\">All tags</Link>\n               </div>\n            </div> */}\n         </article>\n         <Masonry className=\"showcase\">\n         {data.allMdx.edges.map(({ node }) => (\n            <div key={node.id} className=\"showcase__item\">\n               <figure className=\"card\">\n                  <Link to={`/${node.fields.slug}`} className=\"card__image\">\n                  <Img fluid={node.fields.thumbnail.childImageSharp.fluid} />\n                  </Link>\n                  <figcaption className=\"card__caption\">\n                     <h6 className=\"card__title\">\n                        <Link to={`/${node.fields.slug}`}>{node.frontmatter.title}</Link>\n                     </h6>\n                     <div className=\"card__description\">\n                        <p>{node.frontmatter.summary}</p>\n                     </div>\n                  </figcaption>\n               </figure>\n            </div>\n         ))}\n         </Masonry>\n      </Layout>\n   )\n}\n\n// TagPage.propTypes = {\n//    pageContext: PropTypes.shape({\n//    tag: PropTypes.string.isRequired,\n// }),\n//    data: PropTypes.shape({\n//       allMdx: PropTypes.shape({\n//          totalCount: PropTypes.number.isRequired,\n//          edges: PropTypes.arrayOf(\n//          PropTypes.shape({\n//             node: PropTypes.shape({\n//                frontmatter: PropTypes.shape({\n//                title: PropTypes.string.isRequired,\n//                }),\n//                fields: PropTypes.shape({\n//                slug: PropTypes.string.isRequired,\n//                }),\n//             }),\n//          }).isRequired\n//          ),\n//       }),\n//    }),\n// }\n\nexport default TagPage\n\nexport const pageQuery = graphql`\n   query($tag: String) {\n      allMdx(\n         filter: {frontmatter: {tags: {in: [$tag]}, published: {eq: true}, type: {eq: \"project\"}}},\n         sort: {fields: [frontmatter___date], order: DESC}) {\n         totalCount\n         edges {\n            node {\n               frontmatter {\n                  title\n                  summary\n               }\n               fields {\n                  slug\n                  thumbnail {\n                     childImageSharp {\n                        fluid(maxWidth: 450) {\n                           ...GatsbyImageSharpFluid\n                        }\n                     }\n                  }\n               }\n            }\n         }\n      }\n   }\n`"],"names":["Capitalize","str","lower","toLowerCase","replace","match","toUpperCase","Safe","obj","_ref","pageContext","data","tag","___EmotionJSX","Layout","className","Masonry","allMdx","edges","map","_ref2","node","key","id","Link","to","fields","slug","Img","fluid","thumbnail","childImageSharp","frontmatter","title","summary"],"sourceRoot":""}